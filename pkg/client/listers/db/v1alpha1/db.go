/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/MYOB-Technology/ops-kube-db-operator/pkg/apis/db/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DBLister helps list DBs.
type DBLister interface {
	// List lists all DBs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DB, err error)
	// DBs returns an object that can list and get DBs.
	DBs(namespace string) DBNamespaceLister
	DBListerExpansion
}

// dBLister implements the DBLister interface.
type dBLister struct {
	indexer cache.Indexer
}

// NewDBLister returns a new DBLister.
func NewDBLister(indexer cache.Indexer) DBLister {
	return &dBLister{indexer: indexer}
}

// List lists all DBs in the indexer.
func (s *dBLister) List(selector labels.Selector) (ret []*v1alpha1.DB, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DB))
	})
	return ret, err
}

// DBs returns an object that can list and get DBs.
func (s *dBLister) DBs(namespace string) DBNamespaceLister {
	return dBNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DBNamespaceLister helps list and get DBs.
type DBNamespaceLister interface {
	// List lists all DBs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DB, err error)
	// Get retrieves the DB from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DB, error)
	DBNamespaceListerExpansion
}

// dBNamespaceLister implements the DBNamespaceLister
// interface.
type dBNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DBs in the indexer for a given namespace.
func (s dBNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DB, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DB))
	})
	return ret, err
}

// Get retrieves the DB from the indexer for a given namespace and name.
func (s dBNamespaceLister) Get(name string) (*v1alpha1.DB, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("db"), name)
	}
	return obj.(*v1alpha1.DB), nil
}
